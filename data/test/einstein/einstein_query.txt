p1 = (X)--[l:det||nmod_poss||amod||mark||case||punct||cc]->(Y)                   // Graph matching, First pattern
      where ((TEST "= |𝜑 ⦃\"Y\"⦄ | 0 ") ∧ ((Y unmatched p2 . K) ∧ ((Y unmatched p3 . T) ∧ ((Y unmatched p2 . Z) ∧ (ℓ 0 @ Y ≠ noun)))))
     ↪  set (𝜋 (label l) @ X) as (𝜉 0 @ Y)                        // Property extension
       del Y                                             // Removing a node

       (X);                                              // Instance of reference to be returned

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

p2 = (>> H)<-[∀l:]--(X)                                   // Graph matching, Second pattern
           --[conj] hook
           --[? case]->(K)
           --[? c : cc]->(Z)
           --[? g:]->(Y)
    //where ((Y unmatched p4 . V) ∧ ((Y unmatched p2 . X) ∧ (Y unmatched p3 . V)))
     ↪  new h                                             // Creating a new node standing for H
       set (φ orig , h) as H                             // This node will contain all the grouped element (>>)
       set (𝜋 conj @ h) as (𝜉 0 @ Z)                     // Optional, only if Z exists!
       set (𝜉 0 @ h) as (𝜉 0 @ H)
       set (φ (if ((label l ) = nmod) over l then    // Defining the label in function of K, if this exists,
                                                                      // otherwise using l
                                       (𝜉 0 @ K)
                                      else
                                       (label l)
                                      ), X) as h
       /*set (φ (label g), h) as Y*/
       del Z
       del K
       del l


       (h);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

p3 = (V)--[∀n:nsubj]->(>> S)
        --[? mark]->(M)
        --[? aux]->(A)
        --[? neg]->(N)
        --[? expl]->(E)
        --[∀l:dobj||ccomp||nmod||xcomp||dep]->(>> Z) // Future work: nested join between >>Z and >>Z from the join, when required. This might require to re-do the join semantics
     (Z)--[? case]->(T)
     (S)--[? neg]->(NN)
     where ((V unmatched p3pass . V) ∧ (ℓ 0 @ V = verb))
     ↪
        //new s
        set(φ (if ((label l ) = nmod) over l then    // Defining the label in function of T, if this exists,
                                                                      // otherwise using V
                                              SCRIPT "(^(^(^(^(^(^ (^ ( [(𝜉 ⦃\"A\"⦄) 0])  \" \") ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ⦃\"S.NN\"⦄)  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])) \" \") ([ (𝜉 ⦃\"T\"⦄)  0])"
                                             else
                                              SCRIPT "^(^(^ (^(^(^ ( [(𝜉 ⦃\"A\"⦄) 0])  \" \") ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ⦃\"S.NN\"⦄)  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])"
                                             ), S) as Z
        //set(   𝜋 mark @ s) as (𝜉 0 @ M)
        //set(   φ orig , s) as S
        //set(   𝜉 0 @ s) as (𝜉 0 @ S)
        set(𝜋 expl @ S) as (ℓ 0 @ E)
       del V
       del T
       del M
       del A
       del E
       del NN
       (S);

p3expl = (V)--[∀n:nsubj]->(>> S)
        --[? mark]->(M)
        --[? aux]->(A)
        --[? neg]->(N)
        --[l:expl]->(>> Z) // Future work: nested join between >>Z and >>Z from the join, when required. This might require to re-do the join semantics
     (Z)--[? case]->(T)
     (S)--[? neg]->(NN)
     (S)--[nmod]->(C)
     where ((V unmatched p3pass . V) ∧ ((V unmatched p3 . V) ∧ (ℓ 0 @ V = verb)))
     ↪
        //new s
        set(φ (if ((label l ) = nmod) over l then    // Defining the label in function of T, if this exists,
                                                                      // otherwise using V
                                              SCRIPT "(^(^(^(^(^(^ (^ ( [(𝜉 ⦃\"A\"⦄) 0])  \" \") ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ([⦃\"S.NN\"⦄ 0]))  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])) \" \") ([ (𝜉 ⦃\"T\"⦄)  0])"
                                             else
                                              SCRIPT "^(^(^ (^(^(^ ( [(𝜉 ⦃\"A\"⦄) 0])  \" \") ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ([⦃\"S.NN\"⦄ 0]))  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])"
                                             ), S) as C
        set(𝜋 expl @ S) as (ℓ 0 @ Z)
       del V
       del T
       del M
       del A
       del NN
       del Z
       (S);

p3pass = (V)--[∀n:nsubjpass]->(>> S)
        --[? mark]->(M)
        --[? auxpass]->(A)
        --[? neg]->(N)
        --[? expl]->(E)
        --[? l:ccomp||nmod||xcomp||dep]->(Z) // Future work: nested join between >>Z and >>Z from the join, when required. This might require to re-do the join semantics
     (Z)--[? case]->(T)
     (S)--[? neg]->(NN)
     where (ℓ 0 @ V = verb)
     ↪
        //new s
        set(φ (if ((label l ) = nmod) over l then    // Defining the label in function of T, if this exists,
                                                                      // otherwise using V
                                              SCRIPT "(^(^(^(  ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])) \" \") ([ (𝜉 ⦃\"T\"⦄)  0])"
                                             else
                                              SCRIPT "^(^( ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])"
                                             ), Z) as S
        //set(   𝜋 mark @ s) as (𝜉 0 @ M)
        //set(   φ orig , s) as S
        //set(   𝜉 0 @ s) as (𝜉 0 @ S)

        set(𝜋 expl @ s) as (ℓ 0 @ E)
       del V
       del T
       del M
       del A
       del E
       del NN
       (S);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



p4 = (>> V)<-[∀ ? w:]--(B)
        --[l:dobj||ccomp||nmod||xcomp||dep]->(Z)
        --[? nmod_tmod]->(TN)
        --[? expl]->(E)
        --[? compound_ptr]->(TB)
     (Z)--[? case]->(T)
      where ((V unmatched p3 . V) ∧ ((V unmatched p3pass . V) ∧ ((V unmatched p3expl3 . V) ∧ (ℓ 0 @ V = verb))))
     ↪  new j
        set(φ when , j) as TN
        set(𝜋 expl @ j) as (ℓ 0 @ E)
        set(φ (if ((label l ) = nmod) over l then    // Defining the label in function of T, if this exists,
                                                                              // otherwise using V
                                                      SCRIPT "° (fun y → { l cp (fun x → { ^ (^ ([⦃x⦄ 0]) \" \") ([⦃x⦄ 1]) }) (\" \")  y } ) ( zip ( a {   (° (fun y → {[(𝜉 y) 0]}) ⦃\"*.V\"⦄)  ;   (° (fun y → {[(𝜉 y) 0]}) ⦃\"*.T\"⦄) } ))"
                                                     else
                                                      (𝜉 0 @ V)
                                                     ), j) as Z
       del V                                             // Removing a node
       del T
       del E
       (j)                                              // Instance of reference to be returned


