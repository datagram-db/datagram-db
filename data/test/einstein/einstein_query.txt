
implication = (V)--[l:nsubj||csubj||nsubj]->(subject)
        where ((V unmatched p3 . V) ∧ ((V unmatched p3pass . V) ∧ ((V unmatched p3expl3 . V) ∧ ((V unmatched p3expl3 . V) ∧ (V unmatched p3expl3 . V) ∧ (V unmatched p3expl3 . V) ∧ (V unmatched fauxcop . V)))))
       ↪  set (𝜋 action @ subject) as (𝜉 0 @ V)
          (V);


passivity = (V)--[l:nsubjpass]->(subject)
        where ((V unmatched p3 . V) ∧ ((V unmatched p3pass . V) ∧ ((V unmatched p3expl3 . V) ∧ ((V unmatched p3expl3 . V) ∧ (V unmatched p3expl3 . V) ∧ (V unmatched p3expl3 . V) ∧ (V unmatched fauxcop . V)))))
       ↪  set (𝜋 action @ subject) as (𝜉 0 @ V)
          (V);

       // Case matching the sentences having no subject!
p4 = (>> V)<-[∀ ? w:]--(B)
        --[∀l:dobj||ccomp||nmod||dep||obj||xcomp]->(Z)
        --[? nmod_tmod]->(TN)
        --[? expl]->(E)
        --[? iobj]->(IOA)
        --[? advmod||advcl]->(>> ADM)
        --[? compound_ptr]->(TB)
     (Z)--[? case]->(T)
      where ((V unmatched p3 . V) ∧ ((V unmatched p3pass . V) ∧ ((V unmatched p3expl3 . V) ∧ (ℓ 0 @ V = verb))))
     ↪  new j
        set(φ when , j) as TN
        set(𝜋 expl @ j) as (ℓ 0 @ E)
       set (𝜋 adv @ j) as (𝜉 0 @ ADM)
       set (φ iobj , j) as IOA
       //set (φ dep , j) as XC
        set(φ (if ((label l ) = nmod) over l then    // Defining the label in function of T, if this exists,
                                                                              // otherwise using V
                                                      SCRIPT "° (fun y → { l cp (fun x → { ^ (^ ([⦃x⦄ 0]) \" \") ([⦃x⦄ 1]) }) (\" \")  y } ) ( zip ( a {   (° (fun y → {[(𝜉 y) 0]}) ⦃\"*.V\"⦄)  ; (° (fun y → {[(𝜉 y) 0]}) ⦃\"*.T\"⦄) } ))"
                                                     else
                                                      (𝜉 0 @ V)
                                                     ), j) as Z
       del V                                             // Removing a node
       del T
       del E
       del ADM
       (j);                                              // Instance of reference to be returned

p0 = (>> Compl)<-[∀obl||xcomp]--(WithObl)

     ↪  new h
       set (ℓ 0 @ h) as SCRIPT "\"multipleindobj\""
       set (φ orig , h) as Compl
       set (𝜉 0 @ h) as (𝜉 0 @ Compl)
       set (φ (label l), WithObl) as h

       (h);

p1 = (X)--[l:det||nmod_poss||amod||mark||case||punct||advmod||advcl||cc||dep||punct]->(Y)                   // Graph matching, First pattern
      where ((TEST "= |𝜑 ⦃\"Y\"⦄ | 0 ")) // ∧ ((Y unmatched p2 . K) ∧ ((Y unmatched p3 . T) ∧ ((Y unmatched p2 . Z) ∧ ((ℓ 0 @ Y ≠ noun) ∧ (ℓ 0 @ Y ≠ verb))))))
     ↪  set (𝜋 (label l) @ X) as (𝜉 0 @ Y)                        // Property extension
       del Y                                             // Removing a node

       (X);                                              // Instance of reference to be returned
docop = (target)--[cop]->(V)
                --[l:nsubj||csubj||nsubj]->(subject)
        where ((V unmatched p3 . V) ∧ ((V unmatched p3pass . V) ∧ ((V unmatched p3expl3 . V) ∧ ((V unmatched p3expl3 . V) ∧ (V unmatched p4 . V)))))
       ↪  new a
          new b
          set (φ (𝜉 0 @ V) , a) as b
          set (𝜉 0 @ a) as (𝜉 0 @ subject)
          set (𝜉 0 @ b) as (𝜉 0 @ target)
          set (ℓ 0 @ a) as (ℓ 0 @ subject)
          set (ℓ 0 @ b) as (ℓ 0 @ target)
          set (φ inherit_edge , a) as subject
          set (φ inherit_edge , b) as target
          del l
          del V
          (a);
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

p2 = (>> H)<-[∀l:]--(X)                                   // Graph matching, Second pattern
           --[conj] hook
           --[? case]->(K)
           --[? c : cc]->(Z)
           //--[? g:]->(Y)
    //where ((Y unmatched p4 . V) ∧ ((Y unmatched p2 . X) /*∧ (Y unmatched p3 . V)*/))
     ↪  new h                                             // Creating a new node standing for H
       set (φ orig , h) as H                             // This node will contain all the grouped element (>>)
       set (𝜋 conj @ h) as (𝜉 0 @ Z)                     // Optional, only if Z exists!
       set (𝜉 0 @ h) as (𝜉 0 @ H)
       set (φ (if ((label l ) = nmod) over l then    // Defining the label in function of K, if this exists,
                                                                      // otherwise using l
                                       (𝜉 0 @ K)
                                      else
                                       (label l)
                                      ), X) as h
       del Z
       del K
       del l


       (h);

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

p3fauxcop = (V)--[∀n:nsubj]->(S)
               --[aux]->(A)
               --[? neg]->(N)
            where ((( FILL ( 𝜋 lemma @ A )= be ) ∨ (( FILL ( 𝜋 lemma @ A )= do ) ∨  (( FILL ( 𝜋 lemma @ A )= have ) ∨  (( FILL ( 𝜉 0 @ A )= have ) ∨ ( FILL ( 𝜉 0 @ A )= do ))))) ∧ ((V unmatched p4 . V) ∧((V unmatched p3 . V) ∧ ((V unmatched p3pass . V) ∧ ((V unmatched p3expl . V) ∧((ℓ 0 @ V = verb)))))))
↪  new h
   set (𝜋 action @ h) as (SCRIPT "(^(^(^(^ (^ ( [(𝜉 ⦃\"A\"⦄) 0])  \" \") ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])) \" \")")                        // Property extension
   set (𝜋 begin @ h) as (𝜋 begin @ V)                        // Property extension
   set (𝜋 end @ h) as (𝜋 end @ V)                        // Property extension
   set (𝜉 0 @ h) as (𝜉 0 @ S)                        // Property extension
   set (ℓ 0 @ h) as (ℓ 0 @ S)                        // Property extension
   set (ℓ 1 @ h) as (SCRIPT "\"root\"")                       // Property extension
         del A                                             // Removing a node
   set (φ inherit_partial , h) as V
         (h);                                              // Instance of reference to be returned


p3simple = (V)--[∀n:nsubj]->(>>S)
        --[? mark]->(M)
        --[? aux]->(A)
        --[? neg]->(N)
        --[∀l:dobj||ccomp||nmod]->(>>Z) // Future work: nested join between >>Z and >>Z from the join, when required. This might require to re-do the join semantics
     (Z)--[? case]->(T)
     where ((V unmatched p3pass . V) ∧ ((V unmatched p3expl . V) ∧((V unmatched p3 . V) ∧((ℓ 0 @ V = verb)))))
     ↪
        //new s
        set(φ (SCRIPT "(^(^(^(^(^ (^ ( [(𝜉 ⦃\"A\"⦄) 0])  \" \") ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])) \" \") ([ (𝜉 ⦃\"T\"⦄)  0]))") , S) as Z
        //set(   𝜋 mark @ s) as (𝜉 0 @ M)
        //set(   φ orig , s) as S
        //set(   𝜉 0 @ s) as (𝜉 0 @ S)
       del V
       del T
       del M

       (S) ;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // This matches any direct clause with subject and (in)direct object.
    // Still, we want to avoid having multiple matches: the idea is to group them by as in 4.
    
p3 = (>> V)<-[∀ ? w:]--(B)
        --[n:nsubj]->(>> S)
        --[? mark]->(M)
        --[? aux]->(A)
        --[? neg]->(N)
        --[? expl]->(E)
        --[? iobj]->(IOZ)
        --[? advmod||advcl]->(>> ADM)
        --[ ge: dobj||ccomp||nmod||dep||obj||obl||xcomp]->( Z) // Future work: nested join between >>Z and >>Z from the join, when required. This might require to re-do the join semantics
     (Z)--[? case]->(T)
     (S)--[? neg]->(NN)
     where ((V unmatched p3pass . V) ∧ ((V unmatched p3expl . V) ∧((ℓ 0 @ V = verb))))
     ↪
        //new s
        set(φ (SCRIPT "[(° (fun y → { l cp (fun x → { ^ (^ ([⦃x⦄ 0]) \" \") ([⦃x⦄ 1]) }) (\" \")  y } ) ( zip ( a {   (° (fun y → {[(𝜉 y) 0]}) ⦃\"*.A\"⦄)  ; (° (fun y → {[(𝜉 y) 0]}) ⦃\"*.N\"⦄) ;  (° (fun y → {[(𝜉 y) 0]}) ⦃\"*.V\"⦄) ; (° (fun y → {[(𝜉 y) 0]}) ⦃\"*.T\"⦄) } ) )) 0]"), S) as Z
        //set(   𝜋 mark @ s) as (𝜉 0 @ M)
        //set(   φ orig , s) as S
        //set(   𝜉 0 @ s) as (𝜉 0 @ S)
        set(𝜋 expl @ S) as (ℓ 0 @ E)
       set (φ iobj , S) as IOZ
       set (φ adv , S) as ADM
       set (φ dep , S) as Z
       del V
       del T
       del M
       del A
       del E
       del NN
       (S);

p3expl = (V)--[∀n:nsubj]->(>> S)
        --[? mark]->(M)
        --[? aux]->(A)
        --[? neg]->(N)
        --[? iobj]->(IOW)
        --[? advmod||advcl]->(>> ADM)
        --[? xcomp||dep||obj||obl]->(XC)
        --[l:expl]->(>> Z) // Future work: nested join between >>Z and >>Z from the join, when required. This might require to re-do the join semantics
     (Z)--[? case]->(T)
     (S)--[? neg]->(NN)
     //(S)--[nmod]->(C)
     where (((ℓ 0 @ V = verb)))
     ↪
        //new s
        set(φ (if ((label l ) = nmod) over l then    // Defining the label in function of T, if this exists,
                                                                      // otherwise using V
                                              SCRIPT "(^(^(^(^(^(^ (^ ( [(𝜉 ⦃\"A\"⦄) 0])  \" \") ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ([⦃\"S.NN\"⦄ 0]))  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])) \" \") ([ (𝜉 ⦃\"T\"⦄)  0])"
                                             else
                                              SCRIPT "^(^(^ (^(^(^ ( [(𝜉 ⦃\"A\"⦄) 0])  \" \") ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ([⦃\"S.NN\"⦄ 0]))  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])"
                                             ), S) as Z
        set(𝜋 expl @ S) as (ℓ 0 @ Z)
       set (φ iobj , S) as IOW
       set (𝜋 adv @ S) as (𝜉 0 @ ADM)
      set (φ dep , S) as XC
       del V
       del T
       del M
       del A
       del NN
       del ADM
       (S);

p3pass = (V)--[∀n:nsubjpass]->(>> S)
        --[? mark]->(M)
        --[? auxpass]->(A)
        --[? neg]->(N)
        --[? expl]->(E)
        --[? iobj]->(IOB)
        --[? advmod||advcl]->(>> ADM)
       // --[? xcomp]->(XC)
        --[? l:ccomp||nmod||dep||xcomp]->(Z) // Future work: nested join between >>Z and >>Z from the join, when required. This might require to re-do the join semantics
     (Z)--[? case]->(T)
     (S)--[? neg]->(NN)
     where ((V unmatched p3expl . V) ∧ (ℓ 0 @ V = verb))
     ↪
        //new s
        set(φ (if ((label l ) = nmod) over l then    // Defining the label in function of T, if this exists,
                                                                      // otherwise using V
                                              SCRIPT "(^(^(^(  ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])) \" \") ([ (𝜉 ⦃\"T\"⦄)  0])"
                                             else
                                              SCRIPT "^(^( ([ (𝜉 ⦃\"N\"⦄)  0])) \" \") ([ (𝜉 ⦃\"V\"⦄)  0])"
                                             ), Z) as S
    set(   𝜉 1 @ Z) as (SCRIPT "\"subjpass\"")
       set (φ iobj , Z) as IOB
       set (𝜋 adv @ Z) as (𝜉 0 @ ADM)
       //set (φ dep , Z) as XC
        set(𝜋 expl @ s) as (ℓ 0 @ E)
       del V
       del T
       del M
       del A
       del E
       del NN
       del ADM
       (S)

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
