
// Generated from antlr4/script/script.g4 by ANTLR 4.11.1


#include "scriptLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct ScriptLexerStaticData final {
  ScriptLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ScriptLexerStaticData(const ScriptLexerStaticData&) = delete;
  ScriptLexerStaticData(ScriptLexerStaticData&&) = delete;
  ScriptLexerStaticData& operator=(const ScriptLexerStaticData&) = delete;
  ScriptLexerStaticData& operator=(ScriptLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag scriptlexerLexerOnceFlag;
ScriptLexerStaticData *scriptlexerLexerStaticData = nullptr;

void scriptlexerLexerInitialize() {
  assert(scriptlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<ScriptLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "VOID", "BOT", "COERCE", "ObjT", "TYPEOF", 
      "SIGMA", "ASSERT", "STRINGT", "LABELT", "DOUBLET", "ANYT", "BOOLT", 
      "INTT", "START", "KIND", "LISTT", "SUBTYPE", "ALPAREN", "ARPAREN", 
      "LPAREN", "RPAREN", "BOOL", "AND_TYPE", "OR_TYPE", "FUN", "NOT", "IF", 
      "THEN", "ELSE", "REMOVE", "FROM", "LOG", "POW", "SIN", "COS", "TAN", 
      "PHI", "ELL", "XI", "INJ", "OBJ", "FLAT", "SELFX", "VARPHI", "CROSS", 
      "SCRIPT", "GSQL", "CREATEDB", "VARNAME", "CREATE", "ELECT", "MAP", 
      "DISJOINT", "FOLD", "ENFORCE", "EscapedString", "NUMBER", "INTEGER", 
      "SPACE", "COMMENT", "LINE_COMMENT", "DecimalFloatingConstant", "FractionalConstant", 
      "ExponentPart", "DIGIT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "';'", "'>>'", "'('", "')'", "'+'", "'-'", "'/'", "'%'", "'*'", 
      "'++'", "'@'", "'&&'", "'||'", "'|'", "'=='", "'!='", "'<='", "'>='", 
      "':='", "'var('", "'eval('", "'=>'", "'sub('", "','", "':'", "'['", 
      "']'", "'[['", "']]'", "']:='", "'in'", "'t<'", "'->'", "'map('", 
      "'select('", "'filter('", "'rfold('", "'lfold('", "'|_'", "'_|'", 
      "'|-'", "'-|'", "'where'", "'as'", "'void'", "", "'coerce'", "'ObjT'", 
      "'typeof'", "'sigma'", "'assert'", "'string'", "'label'", "'double'", 
      "", "'bool'", "'int'", "'star'", "'kind'", "'listof'", "'<:'", "'<'", 
      "'>'", "'{'", "'}'", "", "'/\\'", "'\\/'", "'fun'", "'not'", "'if'", 
      "'then'", "'else'", "'remove'", "'from'", "'log'", "'pow'", "'sin'", 
      "'cos'", "'tan'", "'phi'", "'ell'", "'xi'", "'inj'", "'OBJ'", "'flat'", 
      "'selfx'", "'varphi'", "'cross'", "'script'", "'gsql'", "'CREATEDB'", 
      "", "'CREATE'", "'ELECT'", "'MAP'", "'DISJOINT'", "'FOLD'", "'enforce_subtype'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "VOID", "BOT", "COERCE", 
      "ObjT", "TYPEOF", "SIGMA", "ASSERT", "STRINGT", "LABELT", "DOUBLET", 
      "ANYT", "BOOLT", "INTT", "START", "KIND", "LISTT", "SUBTYPE", "ALPAREN", 
      "ARPAREN", "LPAREN", "RPAREN", "BOOL", "AND_TYPE", "OR_TYPE", "FUN", 
      "NOT", "IF", "THEN", "ELSE", "REMOVE", "FROM", "LOG", "POW", "SIN", 
      "COS", "TAN", "PHI", "ELL", "XI", "INJ", "OBJ", "FLAT", "SELFX", "VARPHI", 
      "CROSS", "SCRIPT", "GSQL", "CREATEDB", "VARNAME", "CREATE", "ELECT", 
      "MAP", "DISJOINT", "FOLD", "ENFORCE", "EscapedString", "NUMBER", "INTEGER", 
      "SPACE", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,105,754,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
  	7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,
  	14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,
  	21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,
  	28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,
  	35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,
  	42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
  	49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
  	56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,
  	63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
  	70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
  	77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,
  	84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
  	91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
  	98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,1,0,1,0,1,1,1,1,
  	1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,
  	9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,
  	15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,
  	19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
  	22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,
  	28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,
  	32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
  	34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,
  	39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,
  	43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,379,8,
  	45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,
  	48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,
  	50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,
  	52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,
  	54,3,54,437,8,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,
  	57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,
  	65,1,65,1,65,3,65,480,8,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,
  	68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,
  	72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,
  	74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,
  	77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,
  	81,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,
  	85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,
  	87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,
  	89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,
  	91,1,91,1,91,1,92,4,92,606,8,92,11,92,12,92,607,1,93,1,93,1,93,1,93,1,
  	93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,96,1,
  	96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,
  	98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
  	98,1,99,1,99,1,99,1,99,5,99,661,8,99,10,99,12,99,664,9,99,1,99,1,99,1,
  	100,3,100,669,8,100,1,100,1,100,3,100,673,8,100,1,100,3,100,676,8,100,
  	1,101,3,101,679,8,101,1,101,1,101,1,102,4,102,684,8,102,11,102,12,102,
  	685,1,102,1,102,1,103,1,103,1,103,1,103,5,103,694,8,103,10,103,12,103,
  	697,9,103,1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,5,104,
  	708,8,104,10,104,12,104,711,9,104,1,104,1,104,1,105,5,105,716,8,105,10,
  	105,12,105,719,9,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
  	3,105,729,8,105,1,106,5,106,732,8,106,10,106,12,106,735,9,106,1,106,1,
  	106,1,106,1,106,1,106,3,106,742,8,106,1,107,1,107,3,107,746,8,107,1,107,
  	1,107,1,108,4,108,751,8,108,11,108,12,108,752,1,695,0,109,1,1,3,2,5,3,
  	7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
  	33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
  	28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
  	79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
  	51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
  	61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,
  	71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,
  	81,163,82,165,83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,
  	91,183,92,185,93,187,94,189,95,191,96,193,97,195,98,197,99,199,100,201,
  	101,203,102,205,103,207,104,209,105,211,0,213,0,215,0,217,0,1,0,7,1,0,
  	97,122,2,0,34,34,92,92,2,0,43,43,45,45,3,0,9,10,13,13,32,32,2,0,10,10,
  	13,13,1,0,48,57,2,0,69,69,101,101,769,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
  	0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
  	17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
  	0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
  	0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
  	49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
  	0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
  	0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
  	81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
  	0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
  	0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,
  	0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,
  	0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,
  	0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,
  	0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,
  	0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,
  	0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,
  	0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,
  	0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,
  	0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,
  	0,0,203,1,0,0,0,0,205,1,0,0,0,0,207,1,0,0,0,0,209,1,0,0,0,1,219,1,0,0,
  	0,3,221,1,0,0,0,5,224,1,0,0,0,7,226,1,0,0,0,9,228,1,0,0,0,11,230,1,0,
  	0,0,13,232,1,0,0,0,15,234,1,0,0,0,17,236,1,0,0,0,19,238,1,0,0,0,21,241,
  	1,0,0,0,23,243,1,0,0,0,25,246,1,0,0,0,27,249,1,0,0,0,29,251,1,0,0,0,31,
  	254,1,0,0,0,33,257,1,0,0,0,35,260,1,0,0,0,37,263,1,0,0,0,39,266,1,0,0,
  	0,41,271,1,0,0,0,43,277,1,0,0,0,45,280,1,0,0,0,47,285,1,0,0,0,49,287,
  	1,0,0,0,51,289,1,0,0,0,53,291,1,0,0,0,55,293,1,0,0,0,57,296,1,0,0,0,59,
  	299,1,0,0,0,61,303,1,0,0,0,63,306,1,0,0,0,65,309,1,0,0,0,67,312,1,0,0,
  	0,69,317,1,0,0,0,71,325,1,0,0,0,73,333,1,0,0,0,75,340,1,0,0,0,77,347,
  	1,0,0,0,79,350,1,0,0,0,81,353,1,0,0,0,83,356,1,0,0,0,85,359,1,0,0,0,87,
  	365,1,0,0,0,89,368,1,0,0,0,91,378,1,0,0,0,93,380,1,0,0,0,95,387,1,0,0,
  	0,97,392,1,0,0,0,99,399,1,0,0,0,101,405,1,0,0,0,103,412,1,0,0,0,105,419,
  	1,0,0,0,107,425,1,0,0,0,109,436,1,0,0,0,111,438,1,0,0,0,113,443,1,0,0,
  	0,115,447,1,0,0,0,117,452,1,0,0,0,119,457,1,0,0,0,121,464,1,0,0,0,123,
  	467,1,0,0,0,125,469,1,0,0,0,127,471,1,0,0,0,129,473,1,0,0,0,131,479,1,
  	0,0,0,133,481,1,0,0,0,135,484,1,0,0,0,137,487,1,0,0,0,139,491,1,0,0,0,
  	141,495,1,0,0,0,143,498,1,0,0,0,145,503,1,0,0,0,147,508,1,0,0,0,149,515,
  	1,0,0,0,151,520,1,0,0,0,153,524,1,0,0,0,155,528,1,0,0,0,157,532,1,0,0,
  	0,159,536,1,0,0,0,161,540,1,0,0,0,163,544,1,0,0,0,165,548,1,0,0,0,167,
  	551,1,0,0,0,169,555,1,0,0,0,171,559,1,0,0,0,173,564,1,0,0,0,175,570,1,
  	0,0,0,177,577,1,0,0,0,179,583,1,0,0,0,181,590,1,0,0,0,183,595,1,0,0,0,
  	185,605,1,0,0,0,187,609,1,0,0,0,189,616,1,0,0,0,191,622,1,0,0,0,193,626,
  	1,0,0,0,195,635,1,0,0,0,197,640,1,0,0,0,199,656,1,0,0,0,201,675,1,0,0,
  	0,203,678,1,0,0,0,205,683,1,0,0,0,207,689,1,0,0,0,209,703,1,0,0,0,211,
  	728,1,0,0,0,213,741,1,0,0,0,215,743,1,0,0,0,217,750,1,0,0,0,219,220,5,
  	59,0,0,220,2,1,0,0,0,221,222,5,62,0,0,222,223,5,62,0,0,223,4,1,0,0,0,
  	224,225,5,40,0,0,225,6,1,0,0,0,226,227,5,41,0,0,227,8,1,0,0,0,228,229,
  	5,43,0,0,229,10,1,0,0,0,230,231,5,45,0,0,231,12,1,0,0,0,232,233,5,47,
  	0,0,233,14,1,0,0,0,234,235,5,37,0,0,235,16,1,0,0,0,236,237,5,42,0,0,237,
  	18,1,0,0,0,238,239,5,43,0,0,239,240,5,43,0,0,240,20,1,0,0,0,241,242,5,
  	64,0,0,242,22,1,0,0,0,243,244,5,38,0,0,244,245,5,38,0,0,245,24,1,0,0,
  	0,246,247,5,124,0,0,247,248,5,124,0,0,248,26,1,0,0,0,249,250,5,124,0,
  	0,250,28,1,0,0,0,251,252,5,61,0,0,252,253,5,61,0,0,253,30,1,0,0,0,254,
  	255,5,33,0,0,255,256,5,61,0,0,256,32,1,0,0,0,257,258,5,60,0,0,258,259,
  	5,61,0,0,259,34,1,0,0,0,260,261,5,62,0,0,261,262,5,61,0,0,262,36,1,0,
  	0,0,263,264,5,58,0,0,264,265,5,61,0,0,265,38,1,0,0,0,266,267,5,118,0,
  	0,267,268,5,97,0,0,268,269,5,114,0,0,269,270,5,40,0,0,270,40,1,0,0,0,
  	271,272,5,101,0,0,272,273,5,118,0,0,273,274,5,97,0,0,274,275,5,108,0,
  	0,275,276,5,40,0,0,276,42,1,0,0,0,277,278,5,61,0,0,278,279,5,62,0,0,279,
  	44,1,0,0,0,280,281,5,115,0,0,281,282,5,117,0,0,282,283,5,98,0,0,283,284,
  	5,40,0,0,284,46,1,0,0,0,285,286,5,44,0,0,286,48,1,0,0,0,287,288,5,58,
  	0,0,288,50,1,0,0,0,289,290,5,91,0,0,290,52,1,0,0,0,291,292,5,93,0,0,292,
  	54,1,0,0,0,293,294,5,91,0,0,294,295,5,91,0,0,295,56,1,0,0,0,296,297,5,
  	93,0,0,297,298,5,93,0,0,298,58,1,0,0,0,299,300,5,93,0,0,300,301,5,58,
  	0,0,301,302,5,61,0,0,302,60,1,0,0,0,303,304,5,105,0,0,304,305,5,110,0,
  	0,305,62,1,0,0,0,306,307,5,116,0,0,307,308,5,60,0,0,308,64,1,0,0,0,309,
  	310,5,45,0,0,310,311,5,62,0,0,311,66,1,0,0,0,312,313,5,109,0,0,313,314,
  	5,97,0,0,314,315,5,112,0,0,315,316,5,40,0,0,316,68,1,0,0,0,317,318,5,
  	115,0,0,318,319,5,101,0,0,319,320,5,108,0,0,320,321,5,101,0,0,321,322,
  	5,99,0,0,322,323,5,116,0,0,323,324,5,40,0,0,324,70,1,0,0,0,325,326,5,
  	102,0,0,326,327,5,105,0,0,327,328,5,108,0,0,328,329,5,116,0,0,329,330,
  	5,101,0,0,330,331,5,114,0,0,331,332,5,40,0,0,332,72,1,0,0,0,333,334,5,
  	114,0,0,334,335,5,102,0,0,335,336,5,111,0,0,336,337,5,108,0,0,337,338,
  	5,100,0,0,338,339,5,40,0,0,339,74,1,0,0,0,340,341,5,108,0,0,341,342,5,
  	102,0,0,342,343,5,111,0,0,343,344,5,108,0,0,344,345,5,100,0,0,345,346,
  	5,40,0,0,346,76,1,0,0,0,347,348,5,124,0,0,348,349,5,95,0,0,349,78,1,0,
  	0,0,350,351,5,95,0,0,351,352,5,124,0,0,352,80,1,0,0,0,353,354,5,124,0,
  	0,354,355,5,45,0,0,355,82,1,0,0,0,356,357,5,45,0,0,357,358,5,124,0,0,
  	358,84,1,0,0,0,359,360,5,119,0,0,360,361,5,104,0,0,361,362,5,101,0,0,
  	362,363,5,114,0,0,363,364,5,101,0,0,364,86,1,0,0,0,365,366,5,97,0,0,366,
  	367,5,115,0,0,367,88,1,0,0,0,368,369,5,118,0,0,369,370,5,111,0,0,370,
  	371,5,105,0,0,371,372,5,100,0,0,372,90,1,0,0,0,373,374,5,110,0,0,374,
  	375,5,117,0,0,375,376,5,108,0,0,376,379,5,108,0,0,377,379,5,9524,0,0,
  	378,373,1,0,0,0,378,377,1,0,0,0,379,92,1,0,0,0,380,381,5,99,0,0,381,382,
  	5,111,0,0,382,383,5,101,0,0,383,384,5,114,0,0,384,385,5,99,0,0,385,386,
  	5,101,0,0,386,94,1,0,0,0,387,388,5,79,0,0,388,389,5,98,0,0,389,390,5,
  	106,0,0,390,391,5,84,0,0,391,96,1,0,0,0,392,393,5,116,0,0,393,394,5,121,
  	0,0,394,395,5,112,0,0,395,396,5,101,0,0,396,397,5,111,0,0,397,398,5,102,
  	0,0,398,98,1,0,0,0,399,400,5,115,0,0,400,401,5,105,0,0,401,402,5,103,
  	0,0,402,403,5,109,0,0,403,404,5,97,0,0,404,100,1,0,0,0,405,406,5,97,0,
  	0,406,407,5,115,0,0,407,408,5,115,0,0,408,409,5,101,0,0,409,410,5,114,
  	0,0,410,411,5,116,0,0,411,102,1,0,0,0,412,413,5,115,0,0,413,414,5,116,
  	0,0,414,415,5,114,0,0,415,416,5,105,0,0,416,417,5,110,0,0,417,418,5,103,
  	0,0,418,104,1,0,0,0,419,420,5,108,0,0,420,421,5,97,0,0,421,422,5,98,0,
  	0,422,423,5,101,0,0,423,424,5,108,0,0,424,106,1,0,0,0,425,426,5,100,0,
  	0,426,427,5,111,0,0,427,428,5,117,0,0,428,429,5,98,0,0,429,430,5,108,
  	0,0,430,431,5,101,0,0,431,108,1,0,0,0,432,433,5,97,0,0,433,434,5,110,
  	0,0,434,437,5,121,0,0,435,437,5,9516,0,0,436,432,1,0,0,0,436,435,1,0,
  	0,0,437,110,1,0,0,0,438,439,5,98,0,0,439,440,5,111,0,0,440,441,5,111,
  	0,0,441,442,5,108,0,0,442,112,1,0,0,0,443,444,5,105,0,0,444,445,5,110,
  	0,0,445,446,5,116,0,0,446,114,1,0,0,0,447,448,5,115,0,0,448,449,5,116,
  	0,0,449,450,5,97,0,0,450,451,5,114,0,0,451,116,1,0,0,0,452,453,5,107,
  	0,0,453,454,5,105,0,0,454,455,5,110,0,0,455,456,5,100,0,0,456,118,1,0,
  	0,0,457,458,5,108,0,0,458,459,5,105,0,0,459,460,5,115,0,0,460,461,5,116,
  	0,0,461,462,5,111,0,0,462,463,5,102,0,0,463,120,1,0,0,0,464,465,5,60,
  	0,0,465,466,5,58,0,0,466,122,1,0,0,0,467,468,5,60,0,0,468,124,1,0,0,0,
  	469,470,5,62,0,0,470,126,1,0,0,0,471,472,5,123,0,0,472,128,1,0,0,0,473,
  	474,5,125,0,0,474,130,1,0,0,0,475,476,5,116,0,0,476,480,5,116,0,0,477,
  	478,5,102,0,0,478,480,5,102,0,0,479,475,1,0,0,0,479,477,1,0,0,0,480,132,
  	1,0,0,0,481,482,5,47,0,0,482,483,5,92,0,0,483,134,1,0,0,0,484,485,5,92,
  	0,0,485,486,5,47,0,0,486,136,1,0,0,0,487,488,5,102,0,0,488,489,5,117,
  	0,0,489,490,5,110,0,0,490,138,1,0,0,0,491,492,5,110,0,0,492,493,5,111,
  	0,0,493,494,5,116,0,0,494,140,1,0,0,0,495,496,5,105,0,0,496,497,5,102,
  	0,0,497,142,1,0,0,0,498,499,5,116,0,0,499,500,5,104,0,0,500,501,5,101,
  	0,0,501,502,5,110,0,0,502,144,1,0,0,0,503,504,5,101,0,0,504,505,5,108,
  	0,0,505,506,5,115,0,0,506,507,5,101,0,0,507,146,1,0,0,0,508,509,5,114,
  	0,0,509,510,5,101,0,0,510,511,5,109,0,0,511,512,5,111,0,0,512,513,5,118,
  	0,0,513,514,5,101,0,0,514,148,1,0,0,0,515,516,5,102,0,0,516,517,5,114,
  	0,0,517,518,5,111,0,0,518,519,5,109,0,0,519,150,1,0,0,0,520,521,5,108,
  	0,0,521,522,5,111,0,0,522,523,5,103,0,0,523,152,1,0,0,0,524,525,5,112,
  	0,0,525,526,5,111,0,0,526,527,5,119,0,0,527,154,1,0,0,0,528,529,5,115,
  	0,0,529,530,5,105,0,0,530,531,5,110,0,0,531,156,1,0,0,0,532,533,5,99,
  	0,0,533,534,5,111,0,0,534,535,5,115,0,0,535,158,1,0,0,0,536,537,5,116,
  	0,0,537,538,5,97,0,0,538,539,5,110,0,0,539,160,1,0,0,0,540,541,5,112,
  	0,0,541,542,5,104,0,0,542,543,5,105,0,0,543,162,1,0,0,0,544,545,5,101,
  	0,0,545,546,5,108,0,0,546,547,5,108,0,0,547,164,1,0,0,0,548,549,5,120,
  	0,0,549,550,5,105,0,0,550,166,1,0,0,0,551,552,5,105,0,0,552,553,5,110,
  	0,0,553,554,5,106,0,0,554,168,1,0,0,0,555,556,5,79,0,0,556,557,5,66,0,
  	0,557,558,5,74,0,0,558,170,1,0,0,0,559,560,5,102,0,0,560,561,5,108,0,
  	0,561,562,5,97,0,0,562,563,5,116,0,0,563,172,1,0,0,0,564,565,5,115,0,
  	0,565,566,5,101,0,0,566,567,5,108,0,0,567,568,5,102,0,0,568,569,5,120,
  	0,0,569,174,1,0,0,0,570,571,5,118,0,0,571,572,5,97,0,0,572,573,5,114,
  	0,0,573,574,5,112,0,0,574,575,5,104,0,0,575,576,5,105,0,0,576,176,1,0,
  	0,0,577,578,5,99,0,0,578,579,5,114,0,0,579,580,5,111,0,0,580,581,5,115,
  	0,0,581,582,5,115,0,0,582,178,1,0,0,0,583,584,5,115,0,0,584,585,5,99,
  	0,0,585,586,5,114,0,0,586,587,5,105,0,0,587,588,5,112,0,0,588,589,5,116,
  	0,0,589,180,1,0,0,0,590,591,5,103,0,0,591,592,5,115,0,0,592,593,5,113,
  	0,0,593,594,5,108,0,0,594,182,1,0,0,0,595,596,5,67,0,0,596,597,5,82,0,
  	0,597,598,5,69,0,0,598,599,5,65,0,0,599,600,5,84,0,0,600,601,5,69,0,0,
  	601,602,5,68,0,0,602,603,5,66,0,0,603,184,1,0,0,0,604,606,7,0,0,0,605,
  	604,1,0,0,0,606,607,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,186,1,
  	0,0,0,609,610,5,67,0,0,610,611,5,82,0,0,611,612,5,69,0,0,612,613,5,65,
  	0,0,613,614,5,84,0,0,614,615,5,69,0,0,615,188,1,0,0,0,616,617,5,69,0,
  	0,617,618,5,76,0,0,618,619,5,69,0,0,619,620,5,67,0,0,620,621,5,84,0,0,
  	621,190,1,0,0,0,622,623,5,77,0,0,623,624,5,65,0,0,624,625,5,80,0,0,625,
  	192,1,0,0,0,626,627,5,68,0,0,627,628,5,73,0,0,628,629,5,83,0,0,629,630,
  	5,74,0,0,630,631,5,79,0,0,631,632,5,73,0,0,632,633,5,78,0,0,633,634,5,
  	84,0,0,634,194,1,0,0,0,635,636,5,70,0,0,636,637,5,79,0,0,637,638,5,76,
  	0,0,638,639,5,68,0,0,639,196,1,0,0,0,640,641,5,101,0,0,641,642,5,110,
  	0,0,642,643,5,102,0,0,643,644,5,111,0,0,644,645,5,114,0,0,645,646,5,99,
  	0,0,646,647,5,101,0,0,647,648,5,95,0,0,648,649,5,115,0,0,649,650,5,117,
  	0,0,650,651,5,98,0,0,651,652,5,116,0,0,652,653,5,121,0,0,653,654,5,112,
  	0,0,654,655,5,101,0,0,655,198,1,0,0,0,656,662,5,34,0,0,657,661,8,1,0,
  	0,658,659,5,92,0,0,659,661,7,1,0,0,660,657,1,0,0,0,660,658,1,0,0,0,661,
  	664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,665,1,0,0,0,664,662,1,
  	0,0,0,665,666,5,34,0,0,666,200,1,0,0,0,667,669,7,2,0,0,668,667,1,0,0,
  	0,668,669,1,0,0,0,669,670,1,0,0,0,670,676,3,211,105,0,671,673,7,2,0,0,
  	672,671,1,0,0,0,672,673,1,0,0,0,673,674,1,0,0,0,674,676,3,217,108,0,675,
  	668,1,0,0,0,675,672,1,0,0,0,676,202,1,0,0,0,677,679,7,2,0,0,678,677,1,
  	0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,681,3,217,108,0,681,204,1,0,
  	0,0,682,684,7,3,0,0,683,682,1,0,0,0,684,685,1,0,0,0,685,683,1,0,0,0,685,
  	686,1,0,0,0,686,687,1,0,0,0,687,688,6,102,0,0,688,206,1,0,0,0,689,690,
  	5,47,0,0,690,691,5,42,0,0,691,695,1,0,0,0,692,694,9,0,0,0,693,692,1,0,
  	0,0,694,697,1,0,0,0,695,696,1,0,0,0,695,693,1,0,0,0,696,698,1,0,0,0,697,
  	695,1,0,0,0,698,699,5,42,0,0,699,700,5,47,0,0,700,701,1,0,0,0,701,702,
  	6,103,0,0,702,208,1,0,0,0,703,704,5,47,0,0,704,705,5,47,0,0,705,709,1,
  	0,0,0,706,708,8,4,0,0,707,706,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,
  	709,710,1,0,0,0,710,712,1,0,0,0,711,709,1,0,0,0,712,713,6,104,0,0,713,
  	210,1,0,0,0,714,716,7,5,0,0,715,714,1,0,0,0,716,719,1,0,0,0,717,715,1,
  	0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,717,1,0,0,0,720,721,5,46,0,
  	0,721,729,3,217,108,0,722,723,3,217,108,0,723,724,5,46,0,0,724,729,1,
  	0,0,0,725,726,3,217,108,0,726,727,3,215,107,0,727,729,1,0,0,0,728,717,
  	1,0,0,0,728,722,1,0,0,0,728,725,1,0,0,0,729,212,1,0,0,0,730,732,7,5,0,
  	0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,
  	736,1,0,0,0,735,733,1,0,0,0,736,737,5,46,0,0,737,742,3,217,108,0,738,
  	739,3,217,108,0,739,740,5,46,0,0,740,742,1,0,0,0,741,733,1,0,0,0,741,
  	738,1,0,0,0,742,214,1,0,0,0,743,745,7,6,0,0,744,746,7,2,0,0,745,744,1,
  	0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,748,3,217,108,0,748,216,1,0,
  	0,0,749,751,7,5,0,0,750,749,1,0,0,0,751,752,1,0,0,0,752,750,1,0,0,0,752,
  	753,1,0,0,0,753,218,1,0,0,0,20,0,378,436,479,607,660,662,668,672,675,
  	678,685,695,709,717,728,733,741,745,752,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  scriptlexerLexerStaticData = staticData.release();
}

}

scriptLexer::scriptLexer(CharStream *input) : Lexer(input) {
  scriptLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *scriptlexerLexerStaticData->atn, scriptlexerLexerStaticData->decisionToDFA, scriptlexerLexerStaticData->sharedContextCache);
}

scriptLexer::~scriptLexer() {
  delete _interpreter;
}

std::string scriptLexer::getGrammarFileName() const {
  return "script.g4";
}

const std::vector<std::string>& scriptLexer::getRuleNames() const {
  return scriptlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& scriptLexer::getChannelNames() const {
  return scriptlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& scriptLexer::getModeNames() const {
  return scriptlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& scriptLexer::getVocabulary() const {
  return scriptlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView scriptLexer::getSerializedATN() const {
  return scriptlexerLexerStaticData->serializedATN;
}

const atn::ATN& scriptLexer::getATN() const {
  return *scriptlexerLexerStaticData->atn;
}




void scriptLexer::initialize() {
  ::antlr4::internal::call_once(scriptlexerLexerOnceFlag, scriptlexerLexerInitialize);
}
