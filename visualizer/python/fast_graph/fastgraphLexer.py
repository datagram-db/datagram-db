# Generated from viz/fast_graph/fastgraph.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,199,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,
        1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,5,19,106,8,19,10,19,12,19,
        109,9,19,1,19,1,19,1,20,4,20,114,8,20,11,20,12,20,115,1,21,3,21,
        119,8,21,1,21,1,21,3,21,123,8,21,1,21,3,21,126,8,21,1,22,3,22,129,
        8,22,1,22,1,22,1,23,1,23,1,23,1,23,5,23,137,8,23,10,23,12,23,140,
        9,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,151,8,24,
        10,24,12,24,154,9,24,1,24,1,24,1,25,4,25,159,8,25,11,25,12,25,160,
        1,25,1,25,1,26,5,26,166,8,26,10,26,12,26,169,9,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,3,26,179,8,26,1,27,5,27,182,8,27,10,27,
        12,27,185,9,27,1,27,1,27,1,27,1,27,1,27,3,27,192,8,27,1,28,1,28,
        3,28,196,8,28,1,28,1,28,1,138,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,0,55,0,57,0,1,
        0,6,2,0,34,34,92,92,1,0,48,57,2,0,43,43,45,45,2,0,10,10,13,13,3,
        0,9,10,13,13,32,32,2,0,69,69,101,101,211,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,59,1,0,0,0,3,
        61,1,0,0,0,5,63,1,0,0,0,7,67,1,0,0,0,9,69,1,0,0,0,11,73,1,0,0,0,
        13,75,1,0,0,0,15,77,1,0,0,0,17,79,1,0,0,0,19,81,1,0,0,0,21,83,1,
        0,0,0,23,85,1,0,0,0,25,87,1,0,0,0,27,89,1,0,0,0,29,91,1,0,0,0,31,
        93,1,0,0,0,33,95,1,0,0,0,35,97,1,0,0,0,37,99,1,0,0,0,39,101,1,0,
        0,0,41,113,1,0,0,0,43,125,1,0,0,0,45,128,1,0,0,0,47,132,1,0,0,0,
        49,146,1,0,0,0,51,158,1,0,0,0,53,178,1,0,0,0,55,191,1,0,0,0,57,193,
        1,0,0,0,59,60,5,40,0,0,60,2,1,0,0,0,61,62,5,41,0,0,62,4,1,0,0,0,
        63,64,5,45,0,0,64,65,5,45,0,0,65,66,5,91,0,0,66,6,1,0,0,0,67,68,
        5,44,0,0,68,8,1,0,0,0,69,70,5,93,0,0,70,71,5,45,0,0,71,72,5,62,0,
        0,72,10,1,0,0,0,73,74,5,58,0,0,74,12,1,0,0,0,75,76,5,61,0,0,76,14,
        1,0,0,0,77,78,5,91,0,0,78,16,1,0,0,0,79,80,5,93,0,0,80,18,1,0,0,
        0,81,82,5,123,0,0,82,20,1,0,0,0,83,84,5,59,0,0,84,22,1,0,0,0,85,
        86,5,125,0,0,86,24,1,0,0,0,87,88,5,105,0,0,88,26,1,0,0,0,89,90,5,
        118,0,0,90,28,1,0,0,0,91,92,5,120,0,0,92,30,1,0,0,0,93,94,5,108,
        0,0,94,32,1,0,0,0,95,96,5,99,0,0,96,34,1,0,0,0,97,98,5,100,0,0,98,
        36,1,0,0,0,99,100,5,109,0,0,100,38,1,0,0,0,101,107,5,34,0,0,102,
        106,8,0,0,0,103,104,5,92,0,0,104,106,7,0,0,0,105,102,1,0,0,0,105,
        103,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,
        110,1,0,0,0,109,107,1,0,0,0,110,111,5,34,0,0,111,40,1,0,0,0,112,
        114,7,1,0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,
        116,1,0,0,0,116,42,1,0,0,0,117,119,7,2,0,0,118,117,1,0,0,0,118,119,
        1,0,0,0,119,120,1,0,0,0,120,126,3,53,26,0,121,123,7,2,0,0,122,121,
        1,0,0,0,122,123,1,0,0,0,123,124,1,0,0,0,124,126,3,41,20,0,125,118,
        1,0,0,0,125,122,1,0,0,0,126,44,1,0,0,0,127,129,7,2,0,0,128,127,1,
        0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,131,3,41,20,0,131,46,1,
        0,0,0,132,133,5,47,0,0,133,134,5,42,0,0,134,138,1,0,0,0,135,137,
        9,0,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,139,1,0,0,0,138,136,
        1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,42,0,0,142,143,
        5,47,0,0,143,144,1,0,0,0,144,145,6,23,0,0,145,48,1,0,0,0,146,147,
        5,47,0,0,147,148,5,47,0,0,148,152,1,0,0,0,149,151,8,3,0,0,150,149,
        1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,
        1,0,0,0,154,152,1,0,0,0,155,156,6,24,0,0,156,50,1,0,0,0,157,159,
        7,4,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,
        1,0,0,0,161,162,1,0,0,0,162,163,6,25,0,0,163,52,1,0,0,0,164,166,
        7,1,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,
        1,0,0,0,168,170,1,0,0,0,169,167,1,0,0,0,170,171,5,46,0,0,171,179,
        3,41,20,0,172,173,3,41,20,0,173,174,5,46,0,0,174,179,1,0,0,0,175,
        176,3,41,20,0,176,177,3,57,28,0,177,179,1,0,0,0,178,167,1,0,0,0,
        178,172,1,0,0,0,178,175,1,0,0,0,179,54,1,0,0,0,180,182,7,1,0,0,181,
        180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,
        186,1,0,0,0,185,183,1,0,0,0,186,187,5,46,0,0,187,192,3,41,20,0,188,
        189,3,41,20,0,189,190,5,46,0,0,190,192,1,0,0,0,191,183,1,0,0,0,191,
        188,1,0,0,0,192,56,1,0,0,0,193,195,7,5,0,0,194,196,7,2,0,0,195,194,
        1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,197,198,3,41,20,0,198,58,
        1,0,0,0,16,0,105,107,115,118,122,125,128,138,152,160,167,178,183,
        191,195,1,6,0,0
    ]

class fastgraphLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    EscapedString = 20
    DIGIT = 21
    NUMBER = 22
    INTEGER = 23
    COMMENT = 24
    LINE_COMMENT = 25
    WS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'--['", "','", "']->'", "':'", "'='", "'['", 
            "']'", "'{'", "';'", "'}'", "'i'", "'v'", "'x'", "'l'", "'c'", 
            "'d'", "'m'" ]

    symbolicNames = [ "<INVALID>",
            "EscapedString", "DIGIT", "NUMBER", "INTEGER", "COMMENT", "LINE_COMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "EscapedString", 
                  "DIGIT", "NUMBER", "INTEGER", "COMMENT", "LINE_COMMENT", 
                  "WS", "DecimalFloatingConstant", "FractionalConstant", 
                  "ExponentPart" ]

    grammarFileName = "fastgraph.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


