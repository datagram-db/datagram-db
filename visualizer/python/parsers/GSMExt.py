from __future__ import annotations
__author__ = "Giacomo Bergami"
__copyright__ = "Copyright 2023"
__credits__ = ["Giacomo Bergami"]
__license__ = "GPL"
__version__ = "3.0"
__maintainer__ = "Giacomo Bergami"
__email__ = "bergamigiacomo@gmail.com"
__status__ = "Production"

# generated by datamodel-codegen:
#   filename:  test.schema.json
#   timestamp: 2023-09-18T18:37:05+00:00
#   command: "datamodel-codegen --input test.schema.json --output model.py"



from typing import Any, Dict, List, Optional, Union, Iterable

from pydantic import BaseModel, Extra, Field

from parsers.SemiringProvenance import ProvenanceExpression, ProvenanceObject, ProvenanceContainment, ProvenanceSum, \
    ProvenanceProd, provenance_object, provenance_containment, to_viz_provenance_string

class PhiItem(BaseModel):
    containment: str = Field(
        description='the containment relation associating the parent object to the included child',
    )
    content: int = Field(description='object id providing a content to the object')
    properties: Dict[str, str] = Field(
        description='key-value representation associated to each object',
    )
    score: Union[ProvenanceObject, ProvenanceContainment, ProvenanceSum, ProvenanceProd]= Field(
        description='confidence value of the parent object containing the content object',
    )



def phi(parent:int,label:str,content:int,contId:int,properties:Dict[str,str]=None,score=None):
    if properties is None:
        properties = dict()
    if score is None:
        score = provenance_containment(parent,label,content,contId)
    return PhiItem(containment=label, content=content,properties=properties, score=score)

class GsmSpecification(BaseModel):
    class Config:
        extra = Extra.forbid

    id: int = Field(description='A unique identifier for an GSM object')
    scores: Union[ProvenanceObject, ProvenanceContainment, ProvenanceSum, ProvenanceProd] = Field(
        description='confidence scores associated to the object',
    )
    ell: List[str] = Field(
        description='list of labels/types associated to the object',
        min_items=0,
    )
    xi: List[str] = Field(
        description='list of string-based values associated to the object',
        min_items=0,
    )
    properties: Dict[str, str] = Field(
        description='key-value representation associated to each object',
    )
    phi: List[PhiItem] = Field(
        description='associating a content label to some content',
        min_items=0
    )

def gsm_object(id:int,
               ell:list[str]=None,
               xi:list[str]=None,
               properties:Dict[str,str]=None,
               phi: List[PhiItem]=None,
               scores:Union[ProvenanceObject, ProvenanceContainment, ProvenanceSum, ProvenanceProd]=None):
    if scores is None:
        scores = provenance_object(id)
    if ell is None:
        ell = list()
    if xi is None:
        xi = list()
    if properties is None:
        properties = dict()
    if phi is None:
        phi = list()
    return GsmSpecification(id=0, scores=scores, ell=ell, xi=xi, properties=properties,
                     phi=phi)

def to_vis_network_edge(parent:int, instanceId:int, obj:PhiItem):
    d = dict()
    d["from"] = parent
    d["to"] = obj.content
    d["label"] = obj.containment
    d["font"] = {"align":"middle"}
    d["arrows"] = "to"
    d["provenance"] = to_viz_provenance_string(obj.score)
    d["instance"] = instanceId
    d["title"] = "("+str(parent)+","+obj.containment+","+str(obj.content)+","+str(instanceId)+")"
    d["properties"] = obj.properties
    return d

def to_vis_network_node(obj:GsmSpecification, removed=None, inserted=None):
    d = dict()
    d["id"] = obj.id
    d["title"] = str(obj.id)
    if removed is None:
        removed = set()
    if inserted is None:
        inserted = set()
    label=""
    if len(obj.ell)==0:
        label="--\n"
    else:
        label=obj.ell[0]+"\n"
    if len(obj.xi)==0:
        label=label+"--"
    else:
        label=label+obj.xi[0]
    d["label"] = label
    d["font"] = {"face": "Monospace", "align": "left"}
    d["ell"] = obj.ell
    d["xi"] = obj.xi
    d["properties"] = obj.properties
    d["provenance"] = to_viz_provenance_string(obj.scores)
    if (obj.id in removed):
        d["color"] = "red"
    if (obj.id in inserted):
        d["color"] = "#d2cceb"
    return d

def to_vis_network_phi(objs:Iterable[GsmSpecification]):
    result = list()
    for obj in objs:
        d = dict()
        if obj.phi is not None:
            for x in obj.phi:
                if x.containment not in d:
                    d[x.containment] = list()
                d[x.containment].append(x)
        for k, v in d.items():
            for i, x in enumerate(v):
                result.append(to_vis_network_edge(obj.id, i, x))
    return result

def to_vis_nodes(objs:List[GsmSpecification], removed=None, inserted=None):
    return [to_vis_network_node(x, removed, inserted) for x in objs]