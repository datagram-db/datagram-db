native fixed int as int_fast32_t.
native fixed long as int_fast64_t.
native fixed short as int_fast8_t.
native fixed uint as uint_fast32_t.
native fixed ulong as uint_fast64_t.
native fixed ushort as uint_fast8_t.
native mutable vector as vector<@@>.
native mutable string as string.

access all fixed with arity "&!!context!!" by "&!!context!!" .
access string with arity "!!context!!.size()+1" by "!!context!!.c_data()" .
access vector with arity "!!context!!.size()" by  " " .

declare primary : snippet =
"class @@name@@ {
public:
@@fields?[secondaryfield](!fixed)@@
@@fields(mutable)@@
};"
.

declare secondary : snippet =
"extern \\"C\\" {
struct @@name@@_secondary {
@@fields(fixed)@@
@@fields[offset](!fixed)@@
@@fields?[trailing](!fixed)@@
};
}"
.

declare secondaryfield : snippet =
"struct @@name@@_secondary stable;"
.

declare trailing : snippet =
"char trail[];
"
.

declare writefixed : snippet =
"@@outputsize@@ += fwrite(!!@@name@@_data!!,!!@@name@@_arity!!,1,!!file!!);
"
.

declare writefixed_nosize : snippet =
"fwrite(!!@@name@@_data!!,!!@@name@@_arity!!,1,!!file!!);
"
.

declare field : snippet =
"native(@@ofType@@) @@declaration@@;
"
.

declare offset : snippet =
"native(uint) @@declaration@@_offset;
"
.

declare outputsize_init : snippet =
"native(uint) !!outputsize!! = 0;
"
.

declare outputsize_return : snippet =
"return !!outputsize!!;
"
.

declare vector_foreach : snippet =
"for (native(@@name@@) x : !!vector!!) {
!!statement!!
}
"
.

declare serialize_vector(mutable) : snippet =
"__attribute__((always_inline)) native(uint) serialize_vector_of_@@ofType@@(std::vector<@@nativeType@@>& v, FILE* file) {
    !(outputsize_init,
        outputsize=vserlen)!
    //^vsize : uint^
    native(uint) vsize = v.size();
    !(writefixed context=vsize,
        outputsize=vserlen,
        file=file)!
    vsize++;
    vsize *= sizeof(native(uint));
    !(vector_foreach,
        vector=v,
        statement{
            //^x : @@name@@^
            !(writefixed context=vsize,
                outputsize=vserlen,
                file=file)!
            vsize += (x.size()+1); //^xsize : uint^
        }
    )!
    !(vector_foreach,
            vector=v,
            statement{
                //^x : @@name@@^
                !(writefixed context=x,
                    outputsize=vserlen,
                    file=file)!
            }
    )!
    if (vserlen!=vsize) std::cerr << \\"ERROR: \\" << vserlen << \\" vs \\" << vsize << std::endl;
    !(outputsize_return,
        outputsize=vserlen,
        file=file)!
}
"
.

declare record prova {
    ciao : string,
    id : int,
    afield : string
} as primary, secondary

