
// Generated from antlr4/scriptv2/script.g4 by ANTLR 4.11.1


#include "scriptLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct ScriptLexerStaticData final {
  ScriptLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ScriptLexerStaticData(const ScriptLexerStaticData&) = delete;
  ScriptLexerStaticData(ScriptLexerStaticData&&) = delete;
  ScriptLexerStaticData& operator=(const ScriptLexerStaticData&) = delete;
  ScriptLexerStaticData& operator=(ScriptLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag scriptlexerLexerOnceFlag;
ScriptLexerStaticData *scriptlexerLexerStaticData = nullptr;

void scriptlexerLexerInitialize() {
  assert(scriptlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<ScriptLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "VOID", "BOT", "COERCE", "ObjT", "TYPEOF", "SIGMA", 
      "ASSERT", "STRINGT", "LABELT", "DOUBLET", "ANYT", "BOOLT", "INTT", 
      "START", "KIND", "LISTT", "SUBTYPE", "ALPAREN", "ARPAREN", "LPAREN", 
      "RPAREN", "BOOL", "AND_TYPE", "OR_TYPE", "FUN", "NOT", "LOG", "POW", 
      "SIN", "COS", "TAN", "PHI", "ELL", "XI", "INJ", "OBJ", "FLAT", "SELFX", 
      "ZIP", "VARPHI", "CROSS", "VARNAME", "ENFORCE", "EscapedString", "NUMBER", 
      "INTEGER", "SPACE", "COMMENT", "LINE_COMMENT", "DecimalFloatingConstant", 
      "FractionalConstant", "ExponentPart", "DIGIT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "';'", "'\\u21A6'", "','", "'('", "')'", "'|'", "'\\u2983'", "'\\u2984'", 
      "'\\u298B'", "'\\u298C'", "'\\u27EA'", "'\\u27EB'", "'\\u230A'", "'\\u230B'", 
      "'\\u2308'", "'\\u2309'", "'a'", "'cp'", "'+'", "'-'", "'\\u00F7'", 
      "'%'", "'\\u00B7'", "'^'", "'@'", "'\\u2227'", "'\\u2228'", "'='", 
      "'\\u2260'", "'\\u2264'", "'\\u2265'", "'>'", "'<'", "'\\u225D'", 
      "'.'", "'\\u21D2'", "'e'", "'\\u03C2'", "'['", "']'", "'\\u27E6'", 
      "'\\u27E7'", "'\\u2946'", "'\\u2208'", "'\\u03B3'", "'\\u2192'", "'\\u00B0'", 
      "'\\u03C3'", "'mod'", "'r'", "'l'", "'void'", "'\\u2534'", "'coerce'", 
      "'ObjT'", "'typeof'", "'\\U0001D6F4'", "'assert'", "'string'", "'label'", 
      "'double'", "'\\u252C'", "'bool'", "'int'", "'star'", "'kind'", "'listof'", 
      "'\\u2991'", "'\\u23A8'", "'\\u23AC'", "'{'", "'}'", "", "'\\u22CF'", 
      "'\\u22CE'", "'fun'", "'\\u00AC'", "'log'", "'pow'", "'sin'", "'cos'", 
      "'tan'", "'\\U0001D719'", "'\\u2113'", "'\\U0001D709'", "'inj'", "'J'", 
      "'flat'", "'selfx'", "'zip'", "'\\U0001D711'", "'\\u2A2F'", "", "'enforce_subtype'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "VOID", "BOT", "COERCE", "ObjT", "TYPEOF", "SIGMA", "ASSERT", 
      "STRINGT", "LABELT", "DOUBLET", "ANYT", "BOOLT", "INTT", "START", 
      "KIND", "LISTT", "SUBTYPE", "ALPAREN", "ARPAREN", "LPAREN", "RPAREN", 
      "BOOL", "AND_TYPE", "OR_TYPE", "FUN", "NOT", "LOG", "POW", "SIN", 
      "COS", "TAN", "PHI", "ELL", "XI", "INJ", "OBJ", "FLAT", "SELFX", "ZIP", 
      "VARPHI", "CROSS", "VARNAME", "ENFORCE", "EscapedString", "NUMBER", 
      "INTEGER", "SPACE", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,100,591,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
  	7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,
  	14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,
  	21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,
  	28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,
  	35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,
  	42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
  	49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
  	56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,
  	63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
  	70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
  	77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,
  	84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
  	91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
  	98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,1,0,
  	1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
  	9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
  	1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
  	1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
  	1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
  	1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
  	1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,
  	1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,
  	1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
  	1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,
  	1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,
  	1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,
  	1,72,3,72,412,8,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,
  	1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,80,
  	1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,85,1,85,
  	1,85,1,85,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,
  	1,88,1,89,1,89,1,89,1,89,1,90,1,90,1,91,1,91,1,92,4,92,476,8,92,11,92,
  	12,92,477,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,5,94,500,8,94,10,94,12,94,503,
  	9,94,1,94,1,94,1,95,3,95,508,8,95,1,95,1,95,3,95,512,8,95,1,95,3,95,515,
  	8,95,1,96,3,96,518,8,96,1,96,1,96,1,97,4,97,523,8,97,11,97,12,97,524,
  	1,97,1,97,1,98,1,98,1,98,1,98,5,98,533,8,98,10,98,12,98,536,9,98,1,98,
  	1,98,1,98,1,98,1,98,1,99,1,99,5,99,545,8,99,10,99,12,99,548,9,99,1,99,
  	1,99,1,100,5,100,553,8,100,10,100,12,100,556,9,100,1,100,1,100,1,100,
  	1,100,1,100,1,100,1,100,1,100,3,100,566,8,100,1,101,5,101,569,8,101,10,
  	101,12,101,572,9,101,1,101,1,101,1,101,1,101,1,101,3,101,579,8,101,1,
  	102,1,102,3,102,583,8,102,1,102,1,102,1,103,4,103,588,8,103,11,103,12,
  	103,589,1,534,0,104,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
  	45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
  	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
  	91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
  	56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,
  	66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,
  	76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,169,85,171,
  	86,173,87,175,88,177,89,179,90,181,91,183,92,185,93,187,94,189,95,191,
  	96,193,97,195,98,197,99,199,100,201,0,203,0,205,0,207,0,1,0,7,1,0,97,
  	122,2,0,34,34,92,92,1,0,45,45,3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,
  	0,48,57,2,0,69,69,101,101,604,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
  	1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
  	0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
  	29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
  	0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
  	0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
  	61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
  	0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
  	0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
  	93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
  	1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
  	1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
  	1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,
  	1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,
  	1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,
  	1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,
  	1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,
  	1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,
  	1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,
  	1,0,0,0,0,195,1,0,0,0,0,197,1,0,0,0,0,199,1,0,0,0,1,209,1,0,0,0,3,211,
  	1,0,0,0,5,213,1,0,0,0,7,215,1,0,0,0,9,217,1,0,0,0,11,219,1,0,0,0,13,221,
  	1,0,0,0,15,223,1,0,0,0,17,225,1,0,0,0,19,227,1,0,0,0,21,229,1,0,0,0,23,
  	231,1,0,0,0,25,233,1,0,0,0,27,235,1,0,0,0,29,237,1,0,0,0,31,239,1,0,0,
  	0,33,241,1,0,0,0,35,243,1,0,0,0,37,246,1,0,0,0,39,248,1,0,0,0,41,250,
  	1,0,0,0,43,252,1,0,0,0,45,254,1,0,0,0,47,256,1,0,0,0,49,258,1,0,0,0,51,
  	260,1,0,0,0,53,262,1,0,0,0,55,264,1,0,0,0,57,266,1,0,0,0,59,268,1,0,0,
  	0,61,270,1,0,0,0,63,272,1,0,0,0,65,274,1,0,0,0,67,276,1,0,0,0,69,278,
  	1,0,0,0,71,280,1,0,0,0,73,282,1,0,0,0,75,284,1,0,0,0,77,286,1,0,0,0,79,
  	288,1,0,0,0,81,290,1,0,0,0,83,292,1,0,0,0,85,294,1,0,0,0,87,296,1,0,0,
  	0,89,298,1,0,0,0,91,300,1,0,0,0,93,302,1,0,0,0,95,304,1,0,0,0,97,306,
  	1,0,0,0,99,310,1,0,0,0,101,312,1,0,0,0,103,314,1,0,0,0,105,319,1,0,0,
  	0,107,321,1,0,0,0,109,328,1,0,0,0,111,333,1,0,0,0,113,340,1,0,0,0,115,
  	342,1,0,0,0,117,349,1,0,0,0,119,356,1,0,0,0,121,362,1,0,0,0,123,369,1,
  	0,0,0,125,371,1,0,0,0,127,376,1,0,0,0,129,380,1,0,0,0,131,385,1,0,0,0,
  	133,390,1,0,0,0,135,397,1,0,0,0,137,399,1,0,0,0,139,401,1,0,0,0,141,403,
  	1,0,0,0,143,405,1,0,0,0,145,411,1,0,0,0,147,413,1,0,0,0,149,415,1,0,0,
  	0,151,417,1,0,0,0,153,421,1,0,0,0,155,423,1,0,0,0,157,427,1,0,0,0,159,
  	431,1,0,0,0,161,435,1,0,0,0,163,439,1,0,0,0,165,443,1,0,0,0,167,445,1,
  	0,0,0,169,447,1,0,0,0,171,449,1,0,0,0,173,453,1,0,0,0,175,455,1,0,0,0,
  	177,460,1,0,0,0,179,466,1,0,0,0,181,470,1,0,0,0,183,472,1,0,0,0,185,475,
  	1,0,0,0,187,479,1,0,0,0,189,495,1,0,0,0,191,514,1,0,0,0,193,517,1,0,0,
  	0,195,522,1,0,0,0,197,528,1,0,0,0,199,542,1,0,0,0,201,565,1,0,0,0,203,
  	578,1,0,0,0,205,580,1,0,0,0,207,587,1,0,0,0,209,210,5,59,0,0,210,2,1,
  	0,0,0,211,212,5,8614,0,0,212,4,1,0,0,0,213,214,5,44,0,0,214,6,1,0,0,0,
  	215,216,5,40,0,0,216,8,1,0,0,0,217,218,5,41,0,0,218,10,1,0,0,0,219,220,
  	5,124,0,0,220,12,1,0,0,0,221,222,5,10627,0,0,222,14,1,0,0,0,223,224,5,
  	10628,0,0,224,16,1,0,0,0,225,226,5,10635,0,0,226,18,1,0,0,0,227,228,5,
  	10636,0,0,228,20,1,0,0,0,229,230,5,10218,0,0,230,22,1,0,0,0,231,232,5,
  	10219,0,0,232,24,1,0,0,0,233,234,5,8970,0,0,234,26,1,0,0,0,235,236,5,
  	8971,0,0,236,28,1,0,0,0,237,238,5,8968,0,0,238,30,1,0,0,0,239,240,5,8969,
  	0,0,240,32,1,0,0,0,241,242,5,97,0,0,242,34,1,0,0,0,243,244,5,99,0,0,244,
  	245,5,112,0,0,245,36,1,0,0,0,246,247,5,43,0,0,247,38,1,0,0,0,248,249,
  	5,45,0,0,249,40,1,0,0,0,250,251,5,247,0,0,251,42,1,0,0,0,252,253,5,37,
  	0,0,253,44,1,0,0,0,254,255,5,183,0,0,255,46,1,0,0,0,256,257,5,94,0,0,
  	257,48,1,0,0,0,258,259,5,64,0,0,259,50,1,0,0,0,260,261,5,8743,0,0,261,
  	52,1,0,0,0,262,263,5,8744,0,0,263,54,1,0,0,0,264,265,5,61,0,0,265,56,
  	1,0,0,0,266,267,5,8800,0,0,267,58,1,0,0,0,268,269,5,8804,0,0,269,60,1,
  	0,0,0,270,271,5,8805,0,0,271,62,1,0,0,0,272,273,5,62,0,0,273,64,1,0,0,
  	0,274,275,5,60,0,0,275,66,1,0,0,0,276,277,5,8797,0,0,277,68,1,0,0,0,278,
  	279,5,46,0,0,279,70,1,0,0,0,280,281,5,8658,0,0,281,72,1,0,0,0,282,283,
  	5,101,0,0,283,74,1,0,0,0,284,285,5,962,0,0,285,76,1,0,0,0,286,287,5,91,
  	0,0,287,78,1,0,0,0,288,289,5,93,0,0,289,80,1,0,0,0,290,291,5,10214,0,
  	0,291,82,1,0,0,0,292,293,5,10215,0,0,293,84,1,0,0,0,294,295,5,10566,0,
  	0,295,86,1,0,0,0,296,297,5,8712,0,0,297,88,1,0,0,0,298,299,5,947,0,0,
  	299,90,1,0,0,0,300,301,5,8594,0,0,301,92,1,0,0,0,302,303,5,176,0,0,303,
  	94,1,0,0,0,304,305,5,963,0,0,305,96,1,0,0,0,306,307,5,109,0,0,307,308,
  	5,111,0,0,308,309,5,100,0,0,309,98,1,0,0,0,310,311,5,114,0,0,311,100,
  	1,0,0,0,312,313,5,108,0,0,313,102,1,0,0,0,314,315,5,118,0,0,315,316,5,
  	111,0,0,316,317,5,105,0,0,317,318,5,100,0,0,318,104,1,0,0,0,319,320,5,
  	9524,0,0,320,106,1,0,0,0,321,322,5,99,0,0,322,323,5,111,0,0,323,324,5,
  	101,0,0,324,325,5,114,0,0,325,326,5,99,0,0,326,327,5,101,0,0,327,108,
  	1,0,0,0,328,329,5,79,0,0,329,330,5,98,0,0,330,331,5,106,0,0,331,332,5,
  	84,0,0,332,110,1,0,0,0,333,334,5,116,0,0,334,335,5,121,0,0,335,336,5,
  	112,0,0,336,337,5,101,0,0,337,338,5,111,0,0,338,339,5,102,0,0,339,112,
  	1,0,0,0,340,341,5,120564,0,0,341,114,1,0,0,0,342,343,5,97,0,0,343,344,
  	5,115,0,0,344,345,5,115,0,0,345,346,5,101,0,0,346,347,5,114,0,0,347,348,
  	5,116,0,0,348,116,1,0,0,0,349,350,5,115,0,0,350,351,5,116,0,0,351,352,
  	5,114,0,0,352,353,5,105,0,0,353,354,5,110,0,0,354,355,5,103,0,0,355,118,
  	1,0,0,0,356,357,5,108,0,0,357,358,5,97,0,0,358,359,5,98,0,0,359,360,5,
  	101,0,0,360,361,5,108,0,0,361,120,1,0,0,0,362,363,5,100,0,0,363,364,5,
  	111,0,0,364,365,5,117,0,0,365,366,5,98,0,0,366,367,5,108,0,0,367,368,
  	5,101,0,0,368,122,1,0,0,0,369,370,5,9516,0,0,370,124,1,0,0,0,371,372,
  	5,98,0,0,372,373,5,111,0,0,373,374,5,111,0,0,374,375,5,108,0,0,375,126,
  	1,0,0,0,376,377,5,105,0,0,377,378,5,110,0,0,378,379,5,116,0,0,379,128,
  	1,0,0,0,380,381,5,115,0,0,381,382,5,116,0,0,382,383,5,97,0,0,383,384,
  	5,114,0,0,384,130,1,0,0,0,385,386,5,107,0,0,386,387,5,105,0,0,387,388,
  	5,110,0,0,388,389,5,100,0,0,389,132,1,0,0,0,390,391,5,108,0,0,391,392,
  	5,105,0,0,392,393,5,115,0,0,393,394,5,116,0,0,394,395,5,111,0,0,395,396,
  	5,102,0,0,396,134,1,0,0,0,397,398,5,10641,0,0,398,136,1,0,0,0,399,400,
  	5,9128,0,0,400,138,1,0,0,0,401,402,5,9132,0,0,402,140,1,0,0,0,403,404,
  	5,123,0,0,404,142,1,0,0,0,405,406,5,125,0,0,406,144,1,0,0,0,407,408,5,
  	116,0,0,408,412,5,116,0,0,409,410,5,102,0,0,410,412,5,102,0,0,411,407,
  	1,0,0,0,411,409,1,0,0,0,412,146,1,0,0,0,413,414,5,8911,0,0,414,148,1,
  	0,0,0,415,416,5,8910,0,0,416,150,1,0,0,0,417,418,5,102,0,0,418,419,5,
  	117,0,0,419,420,5,110,0,0,420,152,1,0,0,0,421,422,5,172,0,0,422,154,1,
  	0,0,0,423,424,5,108,0,0,424,425,5,111,0,0,425,426,5,103,0,0,426,156,1,
  	0,0,0,427,428,5,112,0,0,428,429,5,111,0,0,429,430,5,119,0,0,430,158,1,
  	0,0,0,431,432,5,115,0,0,432,433,5,105,0,0,433,434,5,110,0,0,434,160,1,
  	0,0,0,435,436,5,99,0,0,436,437,5,111,0,0,437,438,5,115,0,0,438,162,1,
  	0,0,0,439,440,5,116,0,0,440,441,5,97,0,0,441,442,5,110,0,0,442,164,1,
  	0,0,0,443,444,5,120601,0,0,444,166,1,0,0,0,445,446,5,8467,0,0,446,168,
  	1,0,0,0,447,448,5,120585,0,0,448,170,1,0,0,0,449,450,5,105,0,0,450,451,
  	5,110,0,0,451,452,5,106,0,0,452,172,1,0,0,0,453,454,5,74,0,0,454,174,
  	1,0,0,0,455,456,5,102,0,0,456,457,5,108,0,0,457,458,5,97,0,0,458,459,
  	5,116,0,0,459,176,1,0,0,0,460,461,5,115,0,0,461,462,5,101,0,0,462,463,
  	5,108,0,0,463,464,5,102,0,0,464,465,5,120,0,0,465,178,1,0,0,0,466,467,
  	5,122,0,0,467,468,5,105,0,0,468,469,5,112,0,0,469,180,1,0,0,0,470,471,
  	5,120593,0,0,471,182,1,0,0,0,472,473,5,10799,0,0,473,184,1,0,0,0,474,
  	476,7,0,0,0,475,474,1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,
  	0,0,0,478,186,1,0,0,0,479,480,5,101,0,0,480,481,5,110,0,0,481,482,5,102,
  	0,0,482,483,5,111,0,0,483,484,5,114,0,0,484,485,5,99,0,0,485,486,5,101,
  	0,0,486,487,5,95,0,0,487,488,5,115,0,0,488,489,5,117,0,0,489,490,5,98,
  	0,0,490,491,5,116,0,0,491,492,5,121,0,0,492,493,5,112,0,0,493,494,5,101,
  	0,0,494,188,1,0,0,0,495,501,5,34,0,0,496,500,8,1,0,0,497,498,5,92,0,0,
  	498,500,7,1,0,0,499,496,1,0,0,0,499,497,1,0,0,0,500,503,1,0,0,0,501,499,
  	1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,5,34,
  	0,0,505,190,1,0,0,0,506,508,7,2,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,
  	509,1,0,0,0,509,515,3,201,100,0,510,512,7,2,0,0,511,510,1,0,0,0,511,512,
  	1,0,0,0,512,513,1,0,0,0,513,515,3,207,103,0,514,507,1,0,0,0,514,511,1,
  	0,0,0,515,192,1,0,0,0,516,518,7,2,0,0,517,516,1,0,0,0,517,518,1,0,0,0,
  	518,519,1,0,0,0,519,520,3,207,103,0,520,194,1,0,0,0,521,523,7,3,0,0,522,
  	521,1,0,0,0,523,524,1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,526,1,
  	0,0,0,526,527,6,97,0,0,527,196,1,0,0,0,528,529,5,47,0,0,529,530,5,42,
  	0,0,530,534,1,0,0,0,531,533,9,0,0,0,532,531,1,0,0,0,533,536,1,0,0,0,534,
  	535,1,0,0,0,534,532,1,0,0,0,535,537,1,0,0,0,536,534,1,0,0,0,537,538,5,
  	42,0,0,538,539,5,47,0,0,539,540,1,0,0,0,540,541,6,98,0,0,541,198,1,0,
  	0,0,542,546,5,35,0,0,543,545,8,4,0,0,544,543,1,0,0,0,545,548,1,0,0,0,
  	546,544,1,0,0,0,546,547,1,0,0,0,547,549,1,0,0,0,548,546,1,0,0,0,549,550,
  	6,99,0,0,550,200,1,0,0,0,551,553,7,5,0,0,552,551,1,0,0,0,553,556,1,0,
  	0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,554,1,0,0,0,557,
  	558,5,46,0,0,558,566,3,207,103,0,559,560,3,207,103,0,560,561,5,46,0,0,
  	561,566,1,0,0,0,562,563,3,207,103,0,563,564,3,205,102,0,564,566,1,0,0,
  	0,565,554,1,0,0,0,565,559,1,0,0,0,565,562,1,0,0,0,566,202,1,0,0,0,567,
  	569,7,5,0,0,568,567,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,1,
  	0,0,0,571,573,1,0,0,0,572,570,1,0,0,0,573,574,5,46,0,0,574,579,3,207,
  	103,0,575,576,3,207,103,0,576,577,5,46,0,0,577,579,1,0,0,0,578,570,1,
  	0,0,0,578,575,1,0,0,0,579,204,1,0,0,0,580,582,7,6,0,0,581,583,7,2,0,0,
  	582,581,1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,585,3,207,103,0,585,
  	206,1,0,0,0,586,588,7,5,0,0,587,586,1,0,0,0,588,589,1,0,0,0,589,587,1,
  	0,0,0,589,590,1,0,0,0,590,208,1,0,0,0,18,0,411,477,499,501,507,511,514,
  	517,524,534,546,554,565,570,578,582,589,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  scriptlexerLexerStaticData = staticData.release();
}

}

scriptLexer::scriptLexer(CharStream *input) : Lexer(input) {
  scriptLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *scriptlexerLexerStaticData->atn, scriptlexerLexerStaticData->decisionToDFA, scriptlexerLexerStaticData->sharedContextCache);
}

scriptLexer::~scriptLexer() {
  delete _interpreter;
}

std::string scriptLexer::getGrammarFileName() const {
  return "script.g4";
}

const std::vector<std::string>& scriptLexer::getRuleNames() const {
  return scriptlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& scriptLexer::getChannelNames() const {
  return scriptlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& scriptLexer::getModeNames() const {
  return scriptlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& scriptLexer::getVocabulary() const {
  return scriptlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView scriptLexer::getSerializedATN() const {
  return scriptlexerLexerStaticData->serializedATN;
}

const atn::ATN& scriptLexer::getATN() const {
  return *scriptlexerLexerStaticData->atn;
}




void scriptLexer::initialize() {
  ::antlr4::internal::call_once(scriptlexerLexerOnceFlag, scriptlexerLexerInitialize);
}
